import { expect } from 'chai';
import { solve } from './x-algorithm';

describe('x-algorithm', () => {
  it('Решение задачи полного покрытия #1', () => {
    const problem = [
      [1, 0, 0, 1, 0, 0, 1],
      [1, 0, 0, 1, 0, 0, 0], // *
      [0, 0, 0, 1, 1, 0, 1],
      [0, 0, 1, 0, 1, 1, 0], // *
      [0, 1, 1, 0, 0, 1, 1],
      [0, 1, 0, 0, 0, 0, 1], // *
    ];
    const solution = solve(problem);

    expect(solution.map(it => it.pos.row)).to.have.all.members([1, 3, 5]);
  });
  it('Решение задачи полного покрытия #2', () => {
    const problem = [
      [0, 0, 1, 0, 1, 1, 0],
      [1, 0, 0, 1, 0, 0, 1],
      [0, 1, 1, 0, 0, 1, 0],
      [1, 0, 0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0, 0, 1],
      [0, 0, 0, 1, 1, 0, 1]
    ];
    const solution = solve(problem);

    expect(solution.map(it => it.pos.row)).to.have.all.members([0, 3, 4]);
  });
  it('Решение задачи полного покрытия #3', () => {
    const problem = [
    // C  D  G  H  I  J  K  L  M  N  O  P
      [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0],
      [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0],
      [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0],
      [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], // 5
      [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0],
      [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0],
      [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
      [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0], // 12
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0],
      [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],
      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0],
      [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], // 19
      [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], // 20
    // C  D  G  H  I  J  K  L  M  N  O  P
    ];
    const solution = solve(problem);

    expect(solution.map(it => it.pos.row)).to.have.all.members([5, 12, 19, 20]);
  });
});
